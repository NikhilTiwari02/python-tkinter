from tkinter import *
import tkinter.messagebox as tm
from tkinter.filedialog import askopenfilename, asksaveasfilename
import tkinter.font as font
import os
# all functions
root = Tk()
root.title("Untitled-Notepad")
file = None
toolbar_frame = Frame(root)
toolbar_frame.pack(fill=X,side=TOP)
#display

root.geometry("1200x1200")
root.wm_iconbitmap("download.png")
display=Text(font="lucida 15", undo=True)
display.pack(fill=BOTH, expand="TRUE")
def newfile() :
    display.delete(1.0, END)
    global file
    file = None
    root.title("Untitled - Notepad")
def openfile() :
    global file
    file=askopenfilename(defaultextension="*.txt", filetypes=[("All files", "*.*"), ("Text documents", "*.txt")])
    if file == "" :
        file = None
    else :
        root.title(os.path.basename(file)+"-Notepad")
        display.delete(1.0, END)
        f = open(file, "r")
        display.insert(1.0, f.read())
        f.close()
def savefile() :
    global file
    if file==None :
        file=asksaveasfilename(initialfile="Untitled.txt", defaultextension="*.txt", filetypes=[("All types", "*.*"), ( "Text document" ,"*.txt")])
        if file=="" :
            file=None
        else :
            root.title(os.path.basename(file+"- Notepad"))
            f=open(file, "w")
            f.write(display.get(1.0, END))
            f.close()
    else :
        f = open(file, "w")
        f.write(display.get(1.0, END))
        f.close()

def saveasfile() :
    global file
    file = asksaveasfilename(initialfile="Untitled.txt", defaultextension="*.txt",
                             filetype=[("All types", "*.*"), ("Text document", "*.txt")])
    if file == "":
        n=str(root.title()).index("-")
        file=str(root.title())[0:n]
        if file == "Untitled" :
            file=None
        #file=None
    else :
        root.title(os.path.basename(file + "- Notepad"))
        f = open(file, "w")
        f.write(display.get(1.0, END))
        f.close()


def cut() :
    display.event_generate(("<<Cut>>"))
def copy() :
    display.event_generate(("<<Copy>>"))
def paste() :
    display.event_generate(("<<Paste>>"))
def showinfo() :
    tm.showinfo(title="Info",message="This notepad is created by Nikhil Tiwari using tkinter")
def mycopyright() :
    tm.showinfo(title="Copyright",message="Copyright@ Nikhiltiwari India 2021 python tkinter all right reserved")
def select_all(event) :
    display.tag_add("sel",1.0,END)
def clear_all(event) :
    display.delete(1.0, END)
def Italic() :
    pass
def redo() :
    try :
        display.edit_redo()
    except :
        print("Nothing to redo")
def undo() :
    try :
        display.edit_undo()
    except :
        print("Nothing to undo ")
def Nightmodeon() :
    display.config(bg="grey30",fg="lightsteelblue2")
    toolbar_frame.config(bg="black")
    bold_button.config(bg="#373737",fg="white")
    italic_button.config(bg="#373737",fg="white")
    undo_button.config(bg="#373737",fg="white")
    redo_button.config(bg="#373737",fg="white")

def Nightmodeoff() :
    display.config(bg="white", fg="black",)
    toolbar_frame.config(bg="white")
    bold_button.config(bg="white",fg="black")
    italic_button.config(bg="white",fg="black")
    undo_button.config(bg="white",fg="black")
    redo_button.config(bg="white",fg="black")
#Dropdown menu complete

mainmenu=Menu(root, tearoff=0)
filemenu=Menu(mainmenu, tearoff=0)
filemenu.add_command(label="New", command=newfile, font="lucida 12")
filemenu.add_command(label="Open", command=openfile, font="lucida 12")
filemenu.add_command(label="Save", command=savefile, font="lucida 12")
filemenu.add_command(label="Save as", command=saveasfile, font="lucida 12")
filemenu.add_separator()
filemenu.add_command(label="Exit", command=root.destroy, font="lucida 12")
mainmenu.add_cascade(label="File", menu=filemenu, font="lucida 12")
editmenu = Menu(mainmenu, tearoff=0)
editmenu.add_command(label="Cut", command=cut, font="lucida 12", accelerator="ctrl+x")
editmenu.add_command(label="copy", command=copy, font="lucida 12", accelerator="ctrl +c")
editmenu.add_command(label="paste", command=paste, font="lucida 12", accelerator="ctrl+v")
editmenu.add_command(label="undo", command=undo, font="lucida 12", accelerator="ctrl+z")
editmenu.add_command(label="redo", command=redo, font="lucida 12", accelerator="ctrl+y")
editmenu.add_separator()
editmenu.add_command(label="Select all", font="lucida 12", command=lambda: select_all(True), accelerator="ctrl+a")
editmenu.add_command(label="Clear all", font="lucida 12", command=lambda: clear_all(True), accelerator="ctrl+d")
mainmenu.add_cascade(label="Edit", menu=editmenu)
helpmenu = Menu(mainmenu,tearoff=0)
helpmenu.add_command(label="About notepad", command=showinfo, font="lucida 12")
helpmenu.add_command(label="Copyright", command=mycopyright, font="lucida 12")
mainmenu.add_cascade(label="Help", menu=helpmenu)
option_menu=Menu(mainmenu,tearoff=0)
option_menu.add_command(label="Night mode on",font="lucida 12",command=Nightmodeon)
option_menu.add_command(label="Night mode off",font="lucida 12",command=Nightmodeoff)
mainmenu.add_cascade(label="Options",menu=option_menu)
root.config(menu=mainmenu)
#toolbar

def Bold() :
    #creating font
    boldfont=font.Font(display, display.cget("font"))
    boldfont.config(weight="bold")
    #configuring display widget
    display.tag_config("bold", font=boldfont)
    current_tag = display.tag_names("sel.first")
    if "bold" in current_tag :
        display.tag_remove("bold", "sel.first", "sel.last")
    else :
        display.tag_add("bold", "sel.first", "sel.last")
def Italic() :
    #creating font
    boldfont=font.Font(display, display.cget("font"))
    boldfont.config(slant="italic")
    #configuring display widget
    display.tag_config("italic", font=boldfont)
    current_tag = display.tag_names("sel.first")
    if "italic" in current_tag :
        display.tag_remove("italic", "sel.first", "sel.last")
    else :
        display.tag_add("italic", "sel.first", "sel.last")

bold_button=Button(toolbar_frame, text="Bold",bg="white",command=Bold,relief=RAISED,padx=5)
bold_button.grid(row=0,column=0,sticky=W)
italic_button=Button(toolbar_frame,text="Italic",bg="white",command=Italic,relief=RAISED,padx=5)
italic_button.grid(row=0,column=1,sticky=W)
undo_button=Button(toolbar_frame, text="Undo", command=undo,bg="white",relief=RAISED,padx=5)
undo_button.grid(row=0, column=2,sticky=W)
redo_button=Button(toolbar_frame, text="Redo", command=redo,bg="white",relief=RAISED, padx=5)
redo_button.grid(row=0, column=3,sticky=W)
#scrollbar vertical
scroll=Scrollbar(display, orient=VERTICAL, cursor="arrow")
scroll.pack(side=RIGHT, fill=Y)
scroll.config(command=display.yview)
display.config(yscrollcommand=scroll.set, wrap="none")
#event binding


root.bind("<Control-Key-a>", select_all)
root.bind("<Control-Key-d>", clear_all)

#scroll bar horizontal

scrollbar = Scrollbar(display, orient=HORIZONTAL, cursor="arrow")
scrollbar.pack(fill=X, side=BOTTOM)
scrollbar.config(command=display.xview)
display.config(xscrollcommand=scrollbar.set)
root.mainloop()
